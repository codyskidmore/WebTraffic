// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;

namespace cd.Infrastructure.Iis.Data
{
    [DbContext(typeof(IisLogDbContext))]
    [Migration("20181103183907_CreateDatabase")]
    partial class CreateDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("iis")
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebTraffic.Data.Interface.IisLogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cookie");

                    b.Property<DateTime>("DateAccessed");

                    b.Property<string>("Host");

                    b.Property<string>("HttpMethod");

                    b.Property<int?>("IisLogFileId");

                    b.Property<int?>("IisSiteId");

                    b.Property<string>("IpAddress");

                    b.Property<int>("Port");

                    b.Property<string>("Referer");

                    b.Property<int?>("StagedIisLogEntryId");

                    b.Property<int>("Status");

                    b.Property<string>("UriQuery");

                    b.Property<string>("UriStem");

                    b.Property<string>("UserAgent");

                    b.HasKey("Id");

                    b.HasIndex("IisLogFileId");

                    b.HasIndex("IisSiteId");

                    b.HasIndex("StagedIisLogEntryId");

                    b.ToTable("LogEntries");
                });

            modelBuilder.Entity("WebTraffic.Data.Interface.IisLogFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateImported");

                    b.Property<DateTime>("FileDate");

                    b.Property<string>("HostName");

                    b.Property<int?>("IisSiteId");

                    b.Property<string>("LogFileAndPath");

                    b.Property<long>("Size");

                    b.HasKey("Id");

                    b.HasIndex("FileDate");

                    b.HasIndex("HostName");

                    b.HasIndex("IisSiteId");

                    b.HasIndex("LogFileAndPath")
                        .IsUnique()
                        .HasFilter("[LogFileAndPath] IS NOT NULL");

                    b.ToTable("LogFiles");
                });

            modelBuilder.Entity("WebTraffic.Data.Interface.IisSite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("HostName");

                    b.Property<int>("IisId");

                    b.HasKey("Id");

                    b.HasIndex("HostName")
                        .IsUnique()
                        .HasFilter("[HostName] IS NOT NULL");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("WebTraffic.Data.Interface.StagedIisLogEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CIp")
                        .HasColumnName("c-ip")
                        .HasMaxLength(48);

                    b.Property<string>("CsBytes")
                        .HasColumnName("cs-bytes")
                        .HasMaxLength(48);

                    b.Property<string>("CsCookie")
                        .HasColumnName("cs(Cookie)")
                        .HasMaxLength(48);

                    b.Property<string>("CsHost")
                        .HasColumnName("cs-host")
                        .HasMaxLength(48);

                    b.Property<string>("CsMethod")
                        .HasColumnName("cs-method")
                        .HasMaxLength(8);

                    b.Property<string>("CsReferer")
                        .HasColumnName("cs(Referer)")
                        .HasMaxLength(4096);

                    b.Property<string>("CsUriQuery")
                        .HasColumnName("cs-uri-query")
                        .HasMaxLength(2048);

                    b.Property<string>("CsUriStem")
                        .HasColumnName("cs-uri-stem")
                        .HasMaxLength(255);

                    b.Property<string>("CsUserAgent")
                        .HasColumnName("cs(User-Agent)")
                        .HasMaxLength(1024);

                    b.Property<string>("CsUsername")
                        .HasColumnName("cs-username")
                        .HasMaxLength(256);

                    b.Property<string>("CsVersion")
                        .HasColumnName("cs-version")
                        .HasMaxLength(48);

                    b.Property<string>("Date")
                        .HasColumnName("Date")
                        .HasMaxLength(10);

                    b.Property<int?>("IisLogFileId");

                    b.Property<string>("LogFileAndPath")
                        .HasMaxLength(2048);

                    b.Property<string>("SComputerName")
                        .HasColumnName("s-computername")
                        .HasMaxLength(48);

                    b.Property<string>("SIp")
                        .HasColumnName("s-ip")
                        .HasMaxLength(48);

                    b.Property<string>("SPort")
                        .HasColumnName("s-port")
                        .HasMaxLength(4);

                    b.Property<string>("SSiteName")
                        .HasColumnName("s-sitename")
                        .HasMaxLength(48);

                    b.Property<string>("ScByptes")
                        .HasColumnName("sc-bytes")
                        .HasMaxLength(48);

                    b.Property<string>("ScStatus")
                        .HasColumnName("sc-STATUS");

                    b.Property<string>("ScSubStatus")
                        .HasColumnName("sc-substatus");

                    b.Property<string>("ScWin32Status")
                        .HasColumnName("sc-win32-STATUS");

                    b.Property<string>("Time")
                        .HasColumnName("Time")
                        .HasMaxLength(8);

                    b.Property<string>("TimeTaken")
                        .HasColumnName("time-taken");

                    b.HasKey("Id");

                    b.HasIndex("IisLogFileId");

                    b.HasIndex("LogFileAndPath");

                    b.HasIndex("CsHost", "Date", "Time");

                    b.ToTable("StagedLogEntries");
                });

            modelBuilder.Entity("WebTraffic.Data.Interface.IisLogEntry", b =>
                {
                    b.HasOne("WebTraffic.Data.Interface.IisLogFile", "IisLogFile")
                        .WithMany("LogEntries")
                        .HasForeignKey("IisLogFileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebTraffic.Data.Interface.IisSite")
                        .WithMany("LogEntries")
                        .HasForeignKey("IisSiteId");

                    b.HasOne("WebTraffic.Data.Interface.StagedIisLogEntry", "StagedIisLogEntry")
                        .WithMany()
                        .HasForeignKey("StagedIisLogEntryId");
                });

            modelBuilder.Entity("WebTraffic.Data.Interface.IisLogFile", b =>
                {
                    b.HasOne("WebTraffic.Data.Interface.IisSite", "IisSite")
                        .WithMany("LogFiles")
                        .HasForeignKey("IisSiteId");
                });

            modelBuilder.Entity("WebTraffic.Data.Interface.StagedIisLogEntry", b =>
                {
                    b.HasOne("WebTraffic.Data.Interface.IisLogFile", "IisLogFile")
                        .WithMany("StagedLogEntries")
                        .HasForeignKey("IisLogFileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
